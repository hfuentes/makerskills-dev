rules_version = '2';
service cloud.firestore {
	function isSignedIn() {
    return request.auth != null;
  }
  match /databases/{database}/documents {
		function hasRole(role) {
      let auth_email = request.auth.token.email;
      let auth_roles = get(/databases/$(database)/documents/users/$(auth_email)).data.roles;
      return auth_roles[role];
    }
    function isOwner(email) {
    	let auth_email = request.auth.token.email;
      return email == auth_email;
    }
    match /users/{email}/skills/{skill=**} {
    	allow read, write: if isSignedIn() && (hasRole('admin') || (hasRole('profile') && isOwner(email)));
    }
    match /users/{email} {
      allow create, delete: if isSignedIn() && hasRole('admin');
      allow update: if isSignedIn() && (hasRole('admin') || (hasRole('profile') && isOwner(email)));
      allow get, list: if isSignedIn();
    }
    match /skills/{document=**} {
      allow create, update, delete: if isSignedIn() && hasRole('admin');
      allow get, list: if isSignedIn();
    }
    match /exps/{document=**} {
      allow create, update, delete: if isSignedIn() && hasRole('admin');
      allow get, list: if isSignedIn();
    }
    match /levels/{document=**} {
      allow create, update, delete: if isSignedIn() && hasRole('admin');
      allow get, list: if isSignedIn();
    }
  }
}